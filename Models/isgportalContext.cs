// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace GuvenPortAPI.Models;

public partial class isgportalContext : DbContext
{
    public isgportalContext()
    {
    }

    public isgportalContext(DbContextOptions<isgportalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Accident> Accidents { get; set; }

    public virtual DbSet<AccidentReportStaff> AccidentReportStaffs { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractAccident> ContractAccidents { get; set; }

    public virtual DbSet<ContractAndJob> ContractAndJobs { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<MedicalExamination> MedicalExaminations { get; set; }

    public virtual DbSet<Office> Offices { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<StaffOffice> StaffOffices { get; set; }

    public virtual DbSet<StaffWorkplace> StaffWorkplaces { get; set; }

    public virtual DbSet<Workplace> Workplaces { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=localhost;Database=isgportal;Username=postgres;Password=159951");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresEnum("exam_type", new[] { "İşe Giriş", "Periyodik", "Kaza Sonrası" });

        modelBuilder.Entity<Accident>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("accident_pkey");

            entity.ToTable("accident");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccDate).HasColumnName("acc_date");
            entity.Property(e => e.AccTime).HasColumnName("acc_time");
            entity.Property(e => e.Fatality).HasColumnName("fatality");
            entity.Property(e => e.IdWorkplace).HasColumnName("id_workplace");
            entity.Property(e => e.Injury).HasColumnName("injury");
            entity.Property(e => e.NearMiss).HasColumnName("near_miss");
            entity.Property(e => e.PropertyDamage).HasColumnName("property_damage");
            entity.Property(e => e.SgkInfoCheck).HasColumnName("sgk_info_check");
            entity.Property(e => e.SgkInfoDate).HasColumnName("sgk_info_date");
            entity.Property(e => e.StoryOfAccident).HasColumnName("story_of_accident");

            entity.HasOne(d => d.IdWorkplaceNavigation).WithMany(p => p.Accidents)
                .HasForeignKey(d => d.IdWorkplace)
                .HasConstraintName("accident_id_workplace_fkey");
        });

        modelBuilder.Entity<AccidentReportStaff>(entity =>
        {
            entity.HasKey(e => new { e.IdAccident, e.IdStaff }).HasName("accident_report_staff_pkey");

            entity.ToTable("accident_report_staff");

            entity.Property(e => e.IdAccident).HasColumnName("id_accident");
            entity.Property(e => e.IdStaff).HasColumnName("id_staff");

            entity.HasOne(d => d.IdAccidentNavigation).WithMany(p => p.AccidentReportStaffs)
                .HasForeignKey(d => d.IdAccident)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("accident_report_staff_id_accident_fkey");

            entity.HasOne(d => d.IdStaffNavigation).WithMany(p => p.AccidentReportStaffs)
                .HasForeignKey(d => d.IdStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("accident_report_staff_id_staff_fkey");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("contract_pkey");

            entity.ToTable("contract");

            entity.HasIndex(e => e.IdEmployee, "idx_contract_employee_id");

            entity.HasIndex(e => e.IdWorkplace, "idx_contract_workplace_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IdEmployee).HasColumnName("id_employee");
            entity.Property(e => e.IdWorkplace).HasColumnName("id_workplace");
            entity.Property(e => e.StartDate).HasColumnName("start_date");

            entity.HasOne(d => d.IdEmployeeNavigation).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.IdEmployee)
                .HasConstraintName("contract_id_employee_fkey");

            entity.HasOne(d => d.IdWorkplaceNavigation).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.IdWorkplace)
                .HasConstraintName("contract_id_workplace_fkey");
        });

        modelBuilder.Entity<ContractAccident>(entity =>
        {
            entity.HasKey(e => new { e.IdContract, e.IdAccident }).HasName("contract_accident_pkey");

            entity.ToTable("contract_accident");

            entity.Property(e => e.IdContract).HasColumnName("id_contract");
            entity.Property(e => e.IdAccident).HasColumnName("id_accident");

            entity.HasOne(d => d.IdAccidentNavigation).WithMany(p => p.ContractAccidents)
                .HasForeignKey(d => d.IdAccident)
                .HasConstraintName("contract_accident_id_accident_fkey");

            entity.HasOne(d => d.IdContractNavigation).WithMany(p => p.ContractAccidents)
                .HasForeignKey(d => d.IdContract)
                .HasConstraintName("contract_accident_id_contract_fkey");
        });

        modelBuilder.Entity<ContractAndJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("contract_and_job");

            entity.Property(e => e.IdContract).HasColumnName("id_contract");
            entity.Property(e => e.JobType)
                .HasMaxLength(255)
                .HasColumnName("job_type");

            entity.HasOne(d => d.IdContractNavigation).WithMany()
                .HasForeignKey(d => d.IdContract)
                .HasConstraintName("contract_and_job_id_contract_fkey");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.IdStaff).HasName("doctor_pkey");

            entity.ToTable("doctor");

            entity.Property(e => e.IdStaff)
                .ValueGeneratedNever()
                .HasColumnName("id_staff");

            entity.HasOne(d => d.IdStaffNavigation).WithOne(p => p.Doctor)
                .HasForeignKey<Doctor>(d => d.IdStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("doctor_id_staff_fkey");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("employee_pkey");

            entity.ToTable("employee");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BloodT)
                .HasMaxLength(5)
                .HasColumnName("blood_t");
            entity.Property(e => e.Chronic).HasColumnName("chronic");
            entity.Property(e => e.Disable).HasColumnName("disable");
            entity.Property(e => e.Dob).HasColumnName("dob");
            entity.Property(e => e.EntryDate).HasColumnName("entry_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Sex)
                .HasMaxLength(10)
                .HasColumnName("sex");
            entity.Property(e => e.Ssn)
                .HasMaxLength(20)
                .HasColumnName("ssn");
        });

        modelBuilder.Entity<MedicalExamination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("medical_examination_pkey");

            entity.ToTable("medical_examination");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ExFileLocation)
                .HasColumnType("character varying")
                .HasColumnName("ex_file_location");
            entity.Property(e => e.ExFilePrinted).HasColumnName("ex_file_printed");
            entity.Property(e => e.ExFilePrintedUploaded).HasColumnName("ex_file_printed_uploaded");
            entity.Property(e => e.ExIbys).HasColumnName("ex_ibys");
            entity.Property(e => e.IdContract).HasColumnName("id_contract");
            entity.Property(e => e.IdDoctor).HasColumnName("id_doctor");
            entity.Property(e => e.IsDisabled).HasColumnName("is_disabled");
            entity.Property(e => e.ValidityDate).HasColumnName("validity_date");

            entity.HasOne(d => d.IdContractNavigation).WithMany(p => p.MedicalExaminations)
                .HasForeignKey(d => d.IdContract)
                .HasConstraintName("medical_examination_id_contract_fkey");

            entity.HasOne(d => d.IdDoctorNavigation).WithMany(p => p.MedicalExaminations)
                .HasForeignKey(d => d.IdDoctor)
                .HasConstraintName("medical_examination_id_staff_fkey");
        });

        modelBuilder.Entity<Office>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("office_pkey");

            entity.ToTable("office");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Crm)
                .HasMaxLength(255)
                .HasColumnName("crm");
            entity.Property(e => e.IdManagerstaff).HasColumnName("id_managerstaff");
            entity.Property(e => e.OName)
                .HasMaxLength(255)
                .HasColumnName("o_name");

            entity.HasOne(d => d.IdManagerstaffNavigation).WithMany(p => p.Offices)
                .HasForeignKey(d => d.IdManagerstaff)
                .HasConstraintName("office_id_managerstaff_fkey");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("staff_pkey");

            entity.ToTable("staff");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Dob).HasColumnName("dob");
            entity.Property(e => e.Mail)
                .HasMaxLength(255)
                .HasColumnName("mail");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Ssn)
                .HasMaxLength(20)
                .HasColumnName("ssn");
        });

        modelBuilder.Entity<StaffOffice>(entity =>
        {
            entity.HasKey(e => new { e.IdStaff, e.IdOffice }).HasName("staff_office_pkey");

            entity.ToTable("staff_office");

            entity.Property(e => e.IdStaff).HasColumnName("id_staff");
            entity.Property(e => e.IdOffice).HasColumnName("id_office");

            entity.HasOne(d => d.IdOfficeNavigation).WithMany(p => p.StaffOffices)
                .HasForeignKey(d => d.IdOffice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("staff_office_id_office_fkey");

            entity.HasOne(d => d.IdStaffNavigation).WithMany(p => p.StaffOffices)
                .HasForeignKey(d => d.IdStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("staff_office_id_staff_fkey");
        });

        modelBuilder.Entity<StaffWorkplace>(entity =>
        {
            entity.HasKey(e => new { e.IdStaff, e.IdWorkplace }).HasName("staff_workplace_pkey");

            entity.ToTable("staff_workplace");

            entity.Property(e => e.IdStaff).HasColumnName("id_staff");
            entity.Property(e => e.IdWorkplace).HasColumnName("id_workplace");

            entity.HasOne(d => d.IdStaffNavigation).WithMany(p => p.StaffWorkplaces)
                .HasForeignKey(d => d.IdStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("staff_workplace_id_staff_fkey");

            entity.HasOne(d => d.IdWorkplaceNavigation).WithMany(p => p.StaffWorkplaces)
                .HasForeignKey(d => d.IdWorkplace)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("staff_workplace_id_workplace_fkey");
        });

        modelBuilder.Entity<Workplace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("workplace_pkey");

            entity.ToTable("workplace");

            entity.HasIndex(e => e.Active, "idx_workplace_active").HasFilter("(active = true)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Adress)
                .HasMaxLength(255)
                .HasColumnName("adress");
            entity.Property(e => e.HazardLevel).HasColumnName("hazard_level");
            entity.Property(e => e.IdOffice).HasColumnName("id_office");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.SocialSecurityNumber)
                .HasMaxLength(20)
                .HasColumnName("social_security_number");

            entity.HasOne(d => d.IdOfficeNavigation).WithMany(p => p.Workplaces)
                .HasForeignKey(d => d.IdOffice)
                .HasConstraintName("workplace_id_office_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}